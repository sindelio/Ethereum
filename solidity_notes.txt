GENERAL CONCEPTS

Solidity is a high level programming language, contract oriented. In other words, Solidity is an object oriented programming language, whereas the objects of interest are contracts. So we can expect everything an object oriented language has, such as Python and Java, from Solidity. In fact, it supports:

- Inheritance and multiple inheritance
- Constructors
- Polymorphism
- Interfaces
- Public, private, internal and external functions and variables (except external variables)
- Maps

It is also a statically typed language, meaning that constraints are enforced in compilation time, instead of runtime. 

SYNTAX KEYWORDS AND NOTES

- is
	Used for inheritance and multiple inheritance. Contracts can inherit functions, state variables and everything else from their supercontracts.
- contract
	Used to declare a contract(class) that can be instantiated(deployed) in the EVM.
- function
	Used to declare a function. A function can be called with the order of the parameters changed by passing an object to it. It is important to disnguish 2 types of functions: Read-only (constant or view) functions, makes no change to state, costs no Gas. Transactional functions, makes changes to state, costs Gas. A function is public by default.
- var
	Used to declare a state variable. Defaults to internal, can't be external.
- modifier
	Used to declare a modifier, which is a special function that modifies other functions. Modifiers are useful to reuse code in different functions. Syntax: "function name() modifier{}". Inside the modifier, the body function is replaced by "_;".
- public
	Specifies that a state variable or function is viewable by the contract itself, its childs, external contracts and external calls.
- private
	Specifies that a state variable or function is viewable only by it's contract. The subcontracts, or childs, can't call a private function from their parents.
- internal
	Specifies that a state variable or function is viewable by it's smart contracts and it's childs.
- external
	Specifies that a function can only be called by outside smart contracts. External functions are interesting to recevive large amounts of data, because they use less Gas than public functions for the same purpose.
- view
	Specifies that a function can only read from storage. A view functions costs no Gas. A normal function can read and write to storage, but it costs Gas.
- constant
	Alias for view, but deprecated.
- pure
	Specifies that a function can't read or write to storage. A pure function costs no Gas. A normal function can read and write to storage, but it costs Gas.
- returns
	Specifies the expected returned variables from a function. A function can return multiple variables.
- return
	Classic return statement. One can also specify the returned variable inside the function, ommiting the return statement from the function "header"/"specification".
- payable
	A function modifier that allows functions to receive Ether.
- this
	GOTTA STUDY 
- event
	Used to declare an event. Events are logged into the Blockchain in the receipts part. Events are important for auditions and code clarity.
- assert
	Assert and require are special functions that help in dealing with exceptions. Assert guarantees that a certain internal state never occurs.
- require
	Assert and require are special functions that help in dealing with exceptions. Throw is deprecated in the newer versions of Solidity. Require should be used instead of throw. Require checks on externally provided input data. 

Data types:

- int
- uint
- unit256
- uint8
- address
- bool
- string
- bytes
- 

ETHEREUM VIRTUAL MACHINE

It's important to know well the EVM because that's where the contracts will be executed. 
The EVM is composed of:

- A stack of 32 byte addresses up to 1024 addresses total. Recursions aren't recommended as they can easily blow up the stack.
- A memory. An infinetely expanding byte array but gets pricier in Gas as it builds up. It holds the present state of the Ethereum Blockchain.
- A storage. A permanent contract storage, read and write.
- Environment Variables.
- Logs.
- Sub-Calling. Operation by which a contract can call another contract.

Gas: a mechanism to avoid the halting problem. It consists in payment for computational steps in the EVM.

RLP: Recursive Length Prefix Encoding. Basically puts the lenght before and a code after, in this syntax: lenght x code. used extensively in the EVM.

ETHEREUM BLOCKCHAIN

Every block header contains 3 tries:
 	
- Transactions
- State
- Receipts

State. Consists of key-values mapping addresses to account objects. Every account contains 4 pieces of data:
	
- Nonce. Proof of work that allows one to insert append transactions to the Blockchain.
- Balance. In Ether (ETH). 
- Code hash. SHA most likely.
- Storage trie root.

Transactions. Contains 7 values:
	
- Nonce (anti replay attack)
- Gasprice (amount of ether per unit gas)
- Startgas (maximum gas consumable)
- To (destination address)
- Value (amount of ETH to send)
- Data (readable by contract code)
- v, r, s (ECDSA cryptography signature values)

Receipts. Every transaction has a corresponding receipt. Has a few pieces of data:

- Intermediate state root (hash that represents the state after the transaction is executed)
- Cumulative gas used (total amount of gas used in that block including that transaction)
- Logs (append-only, not readable by contracts)

Mining: Process by which blocks of transactions are appended in Ethereum Blockchain. It consists in the resolution of a math problem by the nodes, and whichever node solves the problem first gets the right to append a block, a.k.a. set of transactions,  to the Blockchain. Mining in Ethereum is GPU friendly, with a memory hardness approach. This means that memory is the most important factor, not computational power.

Merkle tree: Tree data structure that allows for efficient verifiable proof that a transaction was included in a block. Also called hash trees, because it sores the hashes of the data in the nodes of the tree.

Trie: Tree data structure that allows for efficient lookups or searches. Also called digital tree or prefix tree or radix tree.

Merkle-patricia-tree: A special type of trie used in the Ethereum Blockchain. Also called patricia tree, this type of trie has some improvements over the normal trie. In the Ethereum Blockchain, all entries in the patricia tree are encoded using the RLP (Recursive Length Prefix).

SECURITY MEASURES AND GOOD PRACTICES

Security recommendations list:
	
1. Fail as early and loudly as possible. Meaning: use exceptions! a.k.a. require() and assert().
2. Favor pull over push payments.
3. Order your function code: conditions => actions => interactions. A.k.a checks => effects => interactions pattern.
4. Be aware of platform limits. EVM has a lot of constraints, such as Gas and transaction speed.
5. Write tests, do audits. Can't fail in the mainnet!
6. Use fault tolerance and automatic bug bounties.
7. Limit the amount of funds deposited.
8. Write simple and modular code.
9. Don’t write all your code from scratch.

Common pitfalls:

1. Private information leaked.
2. Re-entrancy attacks.
3. Loops can trigger Gas limit.
4. Ether send function can fail.
5. Timestamp can be manipulated by miners.
6. Data overflow and underflow. Example: loop with iterator i of type int, instead of type uint256. i will easily reach it's limit and the loop will malfunction.

COMPILERS

- Remix
	Online compiler, has no deployer.
- Solc
	Local, offline compiler. Has no deployer either.

TEST SUITES

- Truffle
	Local compiler, linker, deployer and binary manager. Very customizable. 
- Testrpc
	Local Blockchain abstraction built in Javascript backend (Node.js) for test purposes.
- Geth
	Command Line Interface - CLI, for interacting with Blockchain networks and abstractions.
- Metamask
	Browser extension that allows interaction with websites that have Ethereum related services, such as payments. Has a local Ethereum wallet and a contract watcher built in.
- Withpragma
	Online Integrated Development Interface - IDE, with a contract compiler, deployer and watcher.

GOOD MATERIAL

- Documentation. 
		https://solidity.readthedocs.io/en/develop/
- (Tutorial) Create your own cryptocurrency with Ethereum.
		https://www.ethereum.org/token
- (Course) Basics of Solidity - Bitdegree.
		https://solidity.bitdegree.org/
- (Tutorial) The Hitchhiker’s Guide to Smart Contracts in Ethereum.
		https://blog.zeppelin.solutions/the-hitchhikers-guide-to-smart-contracts-in-ethereum-848f08001f05
- (Tutorial) Onward with Ethereum Smart Contract Security.
		https://blog.zeppelin.solutions/onward-with-ethereum-smart-contract-security-97a827e47702
- (Book) Mastering Ethereum.
- (Book) Introducing Ethereum and Solidity: Foundations of Cryptocurrency and Blockchain programming for Beginners.

ETHEREUM WALLETS

- Ethereum Wallet
	Official wallet. A desktop wallet that supports contract deployment and watching. Can be used with the mainnet or the test nets, and also have a light client.
	Found at: https://github.com/ethereum/mist/releases
- MyEtherWallet
	Online wallet. Supports contract deplyoment and contract watching. Can be used with the mainnet or the test nets.
	Found at: https://www.myetherwallet.com/

QUESTIONS

? This statement
? Indexed attributes on events??? Up to 3 parameters can have the indexed attribute in an event.
? Understand better the trie, radix tree and merkle tree.

TODO LIST

1. Test a crowdfunding smart contract
2. Get the book "Introducing Ethereum and Solidity: Foundations of Cryptocurrency and Blockchain programming for Beginners" asap
2. Study BAT smart contract
3. Study Zepellin secure smart contracts
